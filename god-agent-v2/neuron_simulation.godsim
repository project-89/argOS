{
  "metadata": {
    "description": "A simple simulation of two connected neurons.",
    "created": "2025-06-23T17:07:09.270Z",
    "godAgent": "The Autonomous Creator v2.0",
    "version": "1.0"
  },
  "components": {
    "Neuron": {
      "schema": {
        "description": "Represents a neuron with its electrical properties.",
        "properties": [
          {
            "name": "potential",
            "type": "number",
            "description": "Membrane potential of the neuron (mV)."
          },
          {
            "name": "threshold",
            "type": "number",
            "description": "Threshold potential for firing (mV)."
          },
          {
            "name": "restingPotential",
            "type": "number",
            "description": "Resting membrane potential (mV)."
          },
          {
            "name": "sodiumConductance",
            "type": "number",
            "description": "Conductance of sodium channels."
          },
          {
            "name": "potassiumConductance",
            "type": "number",
            "description": "Conductance of potassium channels."
          },
          {
            "name": "leakConductance",
            "type": "number",
            "description": "Leak conductance."
          },
          {
            "name": "isFiring",
            "type": "boolean",
            "description": "Whether the neuron is currently firing."
          },
          {
            "name": "lastFired",
            "type": "number",
            "description": "Time since last firing (ms)."
          }
        ]
      },
      "code": "// Generated component: Neuron",
      "description": "Represents a neuron with its electrical properties."
    },
    "Synapse": {
      "schema": {
        "description": "Represents a synapse connecting two neurons in a neural network.",
        "properties": [
          {
            "name": "sourceNeuron",
            "type": "eid",
            "description": "Entity ID of the pre-synaptic neuron."
          },
          {
            "name": "targetNeuron",
            "type": "eid",
            "description": "Entity ID of the post-synaptic neuron."
          },
          {
            "name": "weight",
            "type": "number",
            "description": "The weight of the synapse, influencing the signal strength."
          },
          {
            "name": "active",
            "type": "boolean",
            "description": "Flag indicating whether the synapse is active or inactive."
          }
        ]
      },
      "code": "// Generated component: Synapse",
      "description": "Represents a synapse connecting two neurons in a neural network."
    }
  },
  "relationships": {
    "SynapticConnection": {
      "schema": {
        "properties": [
          {
            "name": "target",
            "type": "number",
            "description": "Entity ID of the post-synaptic neuron this connection points to."
          },
          {
            "name": "strength",
            "type": "number",
            "description": "Strength of the synaptic connection, ranging from 0 (weak) to 100 (strong)."
          }
        ]
      },
      "cardinality": "one-to-many",
      "code": "// Generated relationship: SynapticConnection",
      "description": "Represents a synaptic connection between a pre-synaptic neuron and a post-synaptic neuron, with a connection strength."
    }
  },
  "systems": {
    "NeuronSimulationSystem": {
      "description": "Simulates the electrical activity of a neuron, updating its membrane potential and checking for firing events.",
      "requiredComponents": [
        "Neuron"
      ],
      "code": "async function NeuronSimulationSystem(world) {\n  // Query for entities with the Neuron component\n  const entities = query(world, [Neuron]);\n\n  // Process each entity\n  for (const eid of entities) {\n    // Get the neuron's properties\n    let potential = Neuron.potential[eid];\n    const threshold = Neuron.threshold[eid];\n\n    // Simulate synaptic input\n    let synapticCurrent = 0.0;\n\n    // Iterate through incoming synaptic connections\n    if (world.relationships && world.relationships[eid]) {\n      const incomingSynapses = world.relationships[eid];\n      if (incomingSynapses) {\n        for (let i = 0; i < incomingSynapses.length; i++) {\n          const synapse = incomingSynapses[i];\n          if (synapse.type === \"SynapticConnection\") {\n            const sourceNeuronId = synapse.source;\n            // Check if sourceNeuronId exists and is a valid index\n            if (sourceNeuronId !== undefined && Neuron.isFiring[sourceNeuronId] !== undefined) { // Added sourceNeuronId !== undefined check\n              if (Neuron.isFiring[sourceNeuronId]) {\n                synapticCurrent += synapse.properties.strength;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // Simulate external input (replace with actual input later)\n    let externalInput = 0.0;\n    if (eid === 7) { // Neuron1's entity ID is 7\n      externalInput = 50.0; // Increased input to Neuron1\n    }\n    const inputCurrent = synapticCurrent + externalInput;\n\n    // Update membrane potential (simplified leaky integrate-and-fire model)\n    const restingPotential = Neuron.restingPotential[eid];\n    const sodiumConductance = Neuron.sodiumConductance[eid];\n    const potassiumConductance = Neuron.potassiumConductance[eid];\n    const leakConductance = Neuron.leakConductance[eid];\n\n    const capacitance = 1.0; // Membrane capacitance\n    const dt = 0.1; // Time step\n\n    // Calculate the change in membrane potential\n    const dV = (inputCurrent - leakConductance * (potential - restingPotential) - sodiumConductance * (potential - restingPotential) - potassiumConductance * (potential - restingPotential)) / capacitance;\n\n    potential += dV * dt;\n\n    // Check for firing\n    let isFiring = false;\n    if (potential >= threshold) {\n      isFiring = true;\n      potential = restingPotential; // Reset potential after firing\n      Neuron.lastFired[eid] = 0.0;\n    } else {\n      Neuron.lastFired[eid] += dt;\n    }\n\n    // Update the neuron's properties\n    Neuron.potential[eid] = potential;\n    Neuron.isFiring[eid] = isFiring;\n  }\n}"
    }
  },
  "entities": [
    {
      "id": 1,
      "components": {
        "Neuron": {},
        "Synapse": {}
      }
    }
  ],
  "relationshipInstances": [],
  "runtime": {
    "defaultSystems": [
      "NeuronSimulationSystem"
    ],
    "tickRate": 60,
    "maxEntities": 10000
  }
}